#Calculate the paradigmatic support
calc_support_by_category <- function(all_node_calc, categories) {
all_node_calc$category <- case_when(all_node_calc$instr == i &
all_node_calc$val_run1 > 0 ~ all_node_calc$w_degree,
all_node_calc$instr == i &
all_node_calc$val_run1 < 0 ~ -(all_node_calc$w_degree))
all_node_calc$category[is.na(all_node_calc$category)] <- 0
[[i]] <- all_node_calc$category
# install the following packages
install.packages("readr")
install.packages("tidyverse") # for data-wranging incl ggplot2, dplyr, tidyr,
# readr, purr, tibble
install.packages("igraph") # for analysing graphs
install.packages("tidygraph") # analysing graphs in df mode with node & edgelists
install.packages("visNetwork") # package for network visualisation
# Loading the packages
library(readr)
library(tidyverse)
library(igraph)
library(tidygraph)
library(ggraph)
library(visNetwork)
calc_paradigm_support <- function(all_node_calc, paradigm_a, paradigm_b){
#if a paradigm1 concept is evaluated positively (> 0), add their w_degree to a new paradigm_a column in the all_node_calc df'
all_node_calc$paradigm_a <- case_when (all_node_calc$eco == paradigm_a &
all_node_calc$val_run1 > 0 ~ all_node_calc$w_degree,
#if a paradigm_b concept is evaluated negatively, add their w_degree to a new paradigm1 column in the all_node_calc df'
all_node_calc$eco == paradigm_b &
all_node_calc$val_run1 < 0 ~ all_node_calc$w_degree)
#all other concepts are assigned a zero score in the paradigm_a column by nan <- 0
all_node_calc$paradigm_a[is.na(all_node_calc$paradigm_a)] <- 0
#same process for paradigm_b
all_node_calc$paradigm_b <- case_when (all_node_calc$eco == paradigm_b &
all_node_calc$val_run1 > 0 ~ all_node_calc$w_degree,
all_node_calc$eco == paradigm_a &
all_node_calc$val_run1 < 0 ~ all_node_calc$w_degree)
all_node_calc$paradigm_b[is.na(all_node_calc$paradigm_b)] <- 0 #nan omzetten in 0
return <- all_node_calc
}
#Calculate the support - need to change this to automatic
calc_support_by_category <- function(all_node_calc, category_a, category_b, category_c, category_d, category_e, category_f, category_g) {
all_node_calc$category_a <- case_when(all_node_calc$instr == category_a &
all_node_calc$val_run1 > 0 ~ all_node_calc$w_degree,
all_node_calc$instr == category_a &
all_node_calc$val_run1 < 0 ~-(all_node_calc$w_degree))
all_node_calc$category_a[is.na(all_node_calc$category_a)] <- 0
all_node_calc$category_b <- case_when(all_node_calc$instr == category_b &
all_node_calc$val_run1 > 0 ~ all_node_calc$w_degree,
all_node_calc$instr == category_b &
all_node_calc$val_run1 < 0 ~-(all_node_calc$w_degree))
all_node_calc$category_b[is.na(all_node_calc$category_b)] <- 0
all_node_calc$category_c <- case_when(all_node_calc$instr == category_c &
all_node_calc$val_run1 > 0 ~ all_node_calc$w_degree,
all_node_calc$instr == category_c &
all_node_calc$val_run1 < 0 ~-(all_node_calc$w_degree))
all_node_calc$category_c[is.na(all_node_calc$category_c)] <- 0
all_node_calc$category_d <- case_when(all_node_calc$instr == category_d &
all_node_calc$val_run1 > 0 ~ all_node_calc$w_degree,
all_node_calc$instr == category_d &
all_node_calc$val_run1 < 0 ~-(all_node_calc$w_degree))
all_node_calc$category_d[is.na(all_node_calc$category_d)] <- 0
all_node_calc$category_e <- case_when(all_node_calc$instr == category_e &
all_node_calc$val_run1 > 0 ~ all_node_calc$w_degree,
all_node_calc$instr == category_e &
all_node_calc$val_run1 < 0 ~-(all_node_calc$w_degree))
all_node_calc$category_e[is.na(all_node_calc$category_e)] <- 0
all_node_calc$category_f <- case_when(all_node_calc$instr == category_f &
all_node_calc$val_run1 > 0 ~ all_node_calc$w_degree,
all_node_calc$instr == category_f &
all_node_calc$val_run1 < 0 ~-(all_node_calc$w_degree))
all_node_calc$category_f[is.na(all_node_calc$category_f)] <- 0
all_node_calc$category_g <- case_when(all_node_calc$instr == category_g &
all_node_calc$val_run1 > 0 ~ all_node_calc$w_degree,
all_node_calc$instr == category_g &
all_node_calc$val_run1 < 0 ~-(all_node_calc$w_degree))
all_node_calc$category_g[is.na(all_node_calc$category_g)] <- 0
return <- all_node_calc #return and store node_calc
}
=======
install.package("pkgdown")
install.packages("pkgdown")
library(pkgdown)
usethis::use_pkgdown()
library(cffr)
cff_write()
cff_write()
usethis::use_vignette("my-vignette")
pkgdown::build_site()
check()
devtools::check()
install.packages("igraph")
devtools::check()
installed.packages("tidygraph")
install.packages("tidygraph")
devtools::check()
install.packages("ggraph")
devtools::check()
usethis::use_readme_rmd()
devtools::build_readme()
library(readr)
rutte_p2_edgelist <- read_csv("manuscript/rutte_p2-edgelist.csv")
View(rutte_p2_edgelist)
library(readr)
rutte_p2_nodelist <- read_csv("manuscript/rutte_p2-nodelist.csv")
View(rutte_p2_nodelist)
usethis::use_data(rutte_p2_edgelist)
usethis::use_data(rutte_p2_nodelist)
?usethis::use_data_raw
devtools::check()
devtools::check()
