[{"path":"https://fesch-start.github.io/cognitivemapr/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"happy suggestions contributions improve package.","code":""},{"path":[]},{"path":"https://fesch-start.github.io/cognitivemapr/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"How to contribute","what":"Issues","title":"Contributing","text":"easiest way contribute submit issue, make comments software, documentation, typos suggestions.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/CONTRIBUTING.html","id":"pull-requests","dir":"","previous_headings":"How to contribute","what":"Pull requests","title":"Contributing","text":"comfortable git pull requests, can also submit pull request directly suggest changes content. Read pull requests work . short: Fork repository clone locally. Create new branch desktop copy repository. Commit change branch. Push branch fork repository GitHub Submit pull request branch main branch master repository. receive feedback, make changes desktop push branch GitHub: pull request update automatically.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"cognitivemapr analysis functions","text":"tutorial provides explanation illustration analysis may conducted functions cognitivemapr package. Cognitive mapping method specifically designed study belief systems espoused individuals organisations several advantages methods. goal cognitivemapr reduce initial investment currently needed start using method. package provides several functions conduct type cognitive mapping analysis described article: ‘’measure’ Ideas. Introducing method cognitive mapping domain ideational policy studies’ published 2024 Journal European Public Policy ,31(2), 428-451. Femke Van Esch Jeroen Snellens (https://doi.org/10.1080/13501763.2022.2155215). instruction compile data (edge nodelists) needed use functions package, see ‘Tutorial_edge_nodelist’.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-1-install-cognitivemapr","dir":"Articles","previous_headings":"Introduction","what":"Step 1: Install cognitivemapr","title":"cognitivemapr analysis functions","text":"","code":"install.packages(\"devtools\", repos = \"https://cloud.r-project.org/\") library(devtools)  devtools::install_github(\"https://github.com/Fesch-star/cognitivemapr\") library(cognitivemapr)"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-2-read-example-data","dir":"Articles","previous_headings":"Introduction","what":"Step 2: Read example data","title":"cognitivemapr analysis functions","text":"","code":"library(readr)  load(\"../data/rutte_p2_edgelist.rda\") load(\"../data/rutte_p2_nodelist.rda\")"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-2-1-display-first-rows","dir":"Articles","previous_headings":"Introduction > Step 2: Read example data","what":"Step 2.1: Display first rows","title":"cognitivemapr analysis functions","text":"","code":"head(rutte_p2_edgelist) #> # A tibble: 6 × 10 #>    from    to weight edge_value edge_id map_id map_date   speaker    value.x #>   <dbl> <dbl>  <dbl>      <dbl>   <dbl>  <dbl> <date>     <chr>        <dbl> #> 1    21    39      1          1       1    383 2011-04-06 Rutte Mark       1 #> 2   294    39      1          1       2    383 2011-04-06 Rutte Mark       1 #> 3   370    39      1          1       3    383 2011-04-06 Rutte Mark       1 #> 4   380    39      1          1       4    383 2011-04-06 Rutte Mark       1 #> 5   461    39      1          1       5    383 2011-04-06 Rutte Mark       1 #> 6   562    39      1          1       6    383 2011-04-06 Rutte Mark       1 #> # ℹ 1 more variable: value.y <dbl> head(rutte_p2_nodelist) #> # A tibble: 6 × 6 #>      id node_name                  paradigms   int             value instruments #>   <dbl> <chr>                      <chr>       <chr>           <dbl> <chr>       #> 1     8 60% debt ratio             Ordoliberal NA                  1 NA          #> 2    21 Attractiveness to business NA          NA                  1 NA          #> 3    25 Automatic sanctions        Ordoliberal Supranational       1 Stronger E… #> 4    39 benefit of all             NA          NA                  1 NA          #> 5    40 Benefit of debt-states     NA          Intergovernmen…     1 NA          #> 6    48 Benefit of the people      NA          NA                  1 NA"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-3-calculating-basic-cm-measures","dir":"Articles","previous_headings":"Introduction","what":"Step 3: Calculating basic CM measures","title":"cognitivemapr analysis functions","text":"Running calc_degrees_goW function using data Rutte shows function returns dataframe original data nodes CM combined basic measures. Running summary shows basic characterising statistical information regarding variables dataframe. provides first indication regarding number concepts CM, difference strenght concepts map (minimum, maximum, mean w_degree) well overall complexity map (mean degree) may help compare CM others.","code":"#running the function with the data of Mark Rutte, and storing it as a df rutte_p2_node_measures <- cognitivemapr::calculate_degrees(rutte_p2_edgelist, rutte_p2_nodelist)  #provide summary statistics for all measures summary(rutte_p2_node_measures) #>        id         node_name          paradigms             int            #>  Min.   :  8.0   Length:84          Length:84          Length:84          #>  1st Qu.:198.8   Class :character   Class :character   Class :character   #>  Median :386.0   Mode  :character   Mode  :character   Mode  :character   #>  Mean   :363.7                                                            #>  3rd Qu.:555.5                                                            #>  Max.   :647.0                                                            #>      value         instruments           indegree        outdegree     #>  Min.   :-1.0000   Length:84          Min.   : 0.000   Min.   :0.000   #>  1st Qu.: 1.0000   Class :character   1st Qu.: 0.000   1st Qu.:0.000   #>  Median : 1.0000   Mode  :character   Median : 1.000   Median :1.000   #>  Mean   : 0.9524                      Mean   : 1.262   Mean   :1.262   #>  3rd Qu.: 1.0000                      3rd Qu.: 1.000   3rd Qu.:2.000   #>  Max.   : 1.0000                      Max.   :30.000   Max.   :7.000   #>      degree         w_indegree      w_outdegree       w_degree      #>  Min.   : 1.000   Min.   : 0.000   Min.   :0.000   Min.   : 1.000   #>  1st Qu.: 1.000   1st Qu.: 0.000   1st Qu.:0.000   1st Qu.: 1.000   #>  Median : 1.000   Median : 1.000   Median :1.000   Median : 2.000   #>  Mean   : 2.524   Mean   : 1.369   Mean   :1.369   Mean   : 2.738   #>  3rd Qu.: 3.000   3rd Qu.: 1.000   3rd Qu.:2.000   3rd Qu.: 3.000   #>  Max.   :30.000   Max.   :36.000   Max.   :8.000   Max.   :36.000   #>        go               gow          #>  Min.   :-1.0000   Min.   :-1.0000   #>  1st Qu.:-1.0000   1st Qu.:-1.0000   #>  Median :-0.7083   Median :-0.7639   #>  Mean   :-0.2202   Mean   :-0.2192   #>  3rd Qu.: 1.0000   3rd Qu.: 1.0000   #>  Max.   : 1.0000   Max.   : 1.0000"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-3-1-sum-of-saliency","dir":"Articles","previous_headings":"Introduction > Step 3: Calculating basic CM measures","what":"Step 3.1: Sum of saliency","title":"cognitivemapr analysis functions","text":"addition, sum saliency divided two tells us many relations CM consists, commonly used measure relative size CM comparison others.","code":"sum(rutte_p2_node_measures$w_degree) / 2 #> [1] 115"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-3-2-top-10-concepts","dir":"Articles","previous_headings":"Introduction > Step 3: Calculating basic CM measures","what":"Step 3.2: Top 10 concepts","title":"cognitivemapr analysis functions","text":"concept level, output calc_degrees_goW function also provides us first feel content CM. table , instance shows top 10 concepts terms saliency economic paradigm (ordoliberal keynesian) map Rutte. table provides first indication Dutch prime minister highly concerned Eurozone crisis, discussing several institutional predominantly ordoliberal measures tackle crisis, also debating value pragmatic.","code":"# order the dataframe by saliency rutte_p2_node_measures <- rutte_p2_node_measures[order(rutte_p2_node_measures$w_degree, decreasing = TRUE),] rutte_p2_node_measures[1:10,c(\"id\", \"node_name\", \"w_degree\", \"paradigms\")] #> # A tibble: 10 × 4 #>       id node_name                   w_degree paradigms   #>    <dbl> <chr>                          <dbl> <chr>       #>  1    39 benefit of all                    36 NA          #>  2   602 Structural reforms                 9 NA          #>  3   372 Institutional reform of EMU        8 NA          #>  4   469 Pragmatism                         8 NA          #>  5   569 solving the crisis                 7 NA          #>  6   296 Fiscal discipline                  6 Ordoliberal #>  7    25 Automatic sanctions                5 Ordoliberal #>  8   209 Euro-crisis                        5 NA          #>  9   258 Euroscepsis                        5 NA          #> 10   405 Market trust                       5 NA"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-4-calculating-the-evaluation-of-concepts","dir":"Articles","previous_headings":"Introduction","what":"Step 4: Calculating the evaluation of concepts","title":"cognitivemapr analysis functions","text":"analysing relationships concepts path, scholars can establish , concepts perceived within context CM: positively, negatively ambiguously (Hart 1977). instance, assuming ‘solving crisis’ considered positive goal, can derive figure 1 ‘fiscal discipline’ valued positively contributes positively ‘solving crisis’, whereas ‘wider yield spreads’ negatively evaluated contributes negatively ‘fiscal discipline. relation ’pro-European attitude’ positive goal solving crisis seen non-existent (represented 0 sign relation. concept outgoing paths, ‘pro_European attitude’ evaluated ambiguous within context map.  Running function ‘evaluation_step’ establishes evaluation concepts map analysing outgoing relations fashion, taking account sign weight relation well value concepts outgoing relations feed . run function nodelist returned function calculate_degrees needs used (full CM Rutte concepts figure 1 relations displayed figure thus evaluation show next step may different). However, running function , analysis take account evaluation concepts may change result calculation. Running evaluation_step function concepts figure 1, result negative evaluation concept ‘high credit rating’ start analysis, concept ‘wider yield spread’ still assumed positive. However, evaluating outgoing relations ’s immediate neighbouring concepts, changed evaluation concept ‘wider yield spread’ ambiguous (0). turrn change evaluation concept ‘high credit rating’ ambiguous. Running evaluate_step function output first run, shows indeed ‘high credit rating’ now value 0.","code":"test_edge1 <- cognitivemapr::evaluation_step(rutte_p2_edgelist, rutte_p2_node_measures)[[1]] test_node1 <- cognitivemapr::evaluation_step(rutte_p2_edgelist, rutte_p2_node_measures)[[2]]  # find out the rownumber for the data on node with node_name \"High credit rating'  rownr <- which(grepl(\"High credit rating\", rutte_p2_node_measures$node_name))  # show concept and evaluation  test_node1[c(rownr), c(\"id\", \"node_name\", \"val_run1\")] #> # A tibble: 1 × 3 #>      id node_name          val_run1 #>   <dbl> <chr>                 <dbl> #> 1   339 High credit rating       -1 test_edge2 <- cognitivemapr::evaluation_step(test_edge1, test_node1)[[1]] test_node2 <- cognitivemapr::evaluation_step(test_edge1, test_node1)[[2]]  # find out the rownumber for the data on node with node_name \"High credit rating'  rownr <- which(grepl(\"High credit rating\", rutte_p2_node_measures$node_name))  # show concept and evaluation  test_node2[c(rownr), c(\"id\", \"node_name\", \"val_run1\")] #> # A tibble: 1 × 3 #>      id node_name          val_run1 #>   <dbl> <chr>                 <dbl> #> 1   339 High credit rating        0  # delete the test data, so not to crowd the environment rm(test_edge1, test_edge2, test_node1, test_node2, rownr)"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-4-1-set-maximum-number-of-iterations","dir":"Articles","previous_headings":"Introduction > Step 4: Calculating the evaluation of concepts","what":"Step 4.1: Set maximum number of iterations","title":"cognitivemapr analysis functions","text":"means arrive accurate evaluation concepts map, need run evaluation_step function multiple times. want sure reiterated across concepts paths CM, means maximum need iterate function number times number steps longest path CM (presumes CM cyclical, CM cyclical evaluate_concepts function randomly stops cycle point, fixing evaluation concepts result last iteration. work elegant solution next version Package). set_iterations calculates number iterations. Running function example data Rutte shows number iterations map 5.","code":"cognitivemapr::set_iterations(rutte_p2_edgelist, rutte_p2_nodelist) #> [1] 5"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-4-2-calculating-the-evaluation-of-concepts-holistically","dir":"Articles","previous_headings":"Introduction > Step 4: Calculating the evaluation of concepts","what":"Step 4.2: Calculating the evaluation of concepts holistically","title":"cognitivemapr analysis functions","text":"set_iterations function incorporated ‘evaluate_concepts’ function, runs evaluation_step function appropriate number times adjusting storing changing evaluation values concepts. function takes edgelist node_measures list returned calculate_degrees function . print top node_measures list resulting final iteration, shows conducting CM analysis fashion reveals nature, strength complexity Rutte’s ideas well whether valued positively negatively.","code":"result_list <- cognitivemapr::evaluate_concepts(rutte_p2_edgelist, rutte_p2_node_measures) head(result_list[[5]][[2]]) #> # A tibble: 6 × 15 #>      id node_name    paradigms int   value instruments indegree outdegree degree #>   <dbl> <chr>        <chr>     <chr> <dbl> <chr>          <dbl>     <dbl>  <dbl> #> 1    39 benefit of … NA        NA        1 NA                30         0     30 #> 2   602 Structural … NA        NA        1 Structural…        1         5      6 #> 3   372 Institution… NA        Supr…     1 E M U Refo…        1         7      8 #> 4   469 Pragmatism   NA        NA        1 NA                 3         4      7 #> 5   569 solving the… NA        NA        1 NA                 6         0      6 #> 6   296 Fiscal disc… Ordolibe… Inte…     1 NA                 1         5      6 #> # ℹ 6 more variables: w_indegree <dbl>, w_outdegree <dbl>, w_degree <dbl>, #> #   go <dbl>, gow <dbl>, val_run1 <dbl>"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-5-simple-graphical-visualisation","dir":"Articles","previous_headings":"Introduction","what":"Step 5: Simple graphical visualisation","title":"cognitivemapr analysis functions","text":"However order reap full benefits CM analysis grasp relations Rutte’s ideas well reveal argumentation narrative underlying belief system, CM best analysed visually graphical form. draw_cm function creates first simple visual graph CM basis edge nodelist. step 7 tutorial function introduced produces encompassing visualisation several interactive features introduced.","code":"#run the function simple_cm_rutte_p2 <- cognitivemapr::draw_cm(rutte_p2_edgelist, rutte_p2_nodelist)"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-6-categorical-analysis-paradigms-and-policy-instruments","dir":"Articles","previous_headings":"Introduction","what":"Step 6: Categorical analysis: Paradigms and policy instruments","title":"cognitivemapr analysis functions","text":"potential CM analysis may expanded even making use theoretical notion different types ideas. Two types ideas often used literature paradigms instrumental ideas. Paradigms often seen ‘ideas steriods’(ref Hall), encompass xx. Traditionally, rivalling paradigms also perceived incommensurable. example data package derived speech concerning Eurozone crisis. domain, scholars identified two competing paradigms underly policy debate: (neo)Keynesianism Ordoliberalism (Dullien Guérot 2012; Hall 2014). capture paradigmatic orthodoxy Rutte’s belief system, concepts CM classified either Keynesian, Ordoliberal neutral. Applying ‘paradigm_support’ function calculates support calculating relative weighted degree (saliency CM terms) Ordoliberal Keynesian concepts map. Reflecting idea competing paradigms incommensurable, Ordoliberal concept evaluated negatively, saliency (weighted degree) score added support Keynesian paradigm vice versa. Ambiguously evaluated concepts omitted analysis.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-6-1-paradigm-support","dir":"Articles","previous_headings":"Introduction > Step 6: Categorical analysis: Paradigms and policy instruments","what":"Step 6.1: Paradigm Support","title":"cognitivemapr analysis functions","text":"order run paradigm_support function, first calculate_degrees function well evaluate_concepts functions need ran first. , use nodelist resulted last iteration evaluate_concepts function input paradigm support function. addition need derive names paradigms present data. run paradigm_support function parameters, store node_measures dataframe summing scores columns paradigms (displayed percentage total saliency CM), clear CM Rutte signals strong support Ordoliberal paradigm limited support Keynesian paradigm.","code":"# store the result of the last iteration of evaluate_concepts as the new 'node_measures' df  rutte_p2_node_measures <- result_list[[5]][[2]]  # Derive all paradigm names from this dataframe, and store them in a list  paradigms <- unique(rutte_p2_node_measures$paradigms) paradigms <- stats::na.omit (paradigms) # omitting the NULL category paradigm_a <- paradigms[1] paradigm_b <- paradigms[2] # run the paradigm support function on this analysed data  rutte_p2_node_measures <- cognitivemapr::paradigm_support(rutte_p2_node_measures, paradigm_a, paradigm_b) # calculate the total saliency (weighted degree) of the CM w_degree <- sum(rutte_p2_node_measures$w_degree)  # make an empty df with names of instruments as ?  par_support <- vector(mode=\"numeric\")  # calculate the support for each instrument for (paradigm in paradigms) {   score <- sum(rutte_p2_node_measures[paradigm]/w_degree)   par_support <- append(par_support, score) }  # show the results in a dataframe data.frame(paradigms, par_support) #>     paradigms par_support #> 1 Ordoliberal  0.13478261 #> 2   Keynesian  0.06956522  #delete temporary values rm(paradigm, score)"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-6-2-instrument-support","dir":"Articles","previous_headings":"Introduction > Step 6: Categorical analysis: Paradigms and policy instruments","what":"Step 6.2: Instrument Support","title":"cognitivemapr analysis functions","text":"similar way, without added complexity idea incommensurability analysis, instrument_support function calculates support different types policy instruments embedded CM. order use function, concepts CM need categorised belonging certain type policy instrument. de example data package seven policy instruments distinguished: Stronger EU fiscal regulation, structural reforms, monetary measures ECB, economic stimulation, fiscal support, financial market measures EMU reforms (Van Esch & snellens 2024). case, calculation simply lists whether concepts belonging different categories evaluated positively negatively taking saliency (weighted degree) concept account stores values node_measures dataframe. execute function, first need derive instrument-names included data store vector. summing scores columns instruments (percentage total saliency CM), shows Rutte favours implementing structural reforms stronger fiscal regulation making institutional reforms EMU, fiscal support economic stimulation. policy instruments financial market measures ECB measures originally included empirical research absent Rutte’s CM altogether. analysis along lines allow us compare extent instrumental ideas Rutte influenced Dutch management Eurozone crisis. essence, instrument_support function conducts rather straightforward categorical analysis. example data categorising concepts CM terms type policy instrument may relevant, scholars can use function conduct categorical analyses using type categorisation relevant research. contrast paradigm_support function also number categories flexible.","code":"# Derive all instrument names from the dataframe, and store them in a list  instruments <- unique(rutte_p2_node_measures$instruments) instruments <- stats::na.omit (instruments) # omitting the NULL category rutte_p2_node_measures <- cognitivemapr::instrument_support(rutte_p2_node_measures, instruments) # make an empty vector to store the data in instr_support<- vector(mode=\"numeric\")  # calculate the support for each instrument for (instrument in instruments) {   score <- sum(rutte_p2_node_measures[instrument]/w_degree)   instr_support <- append(instr_support, score) }  # show the results in a dataframe data.frame(instruments, instr_support) #>                     instruments instr_support #> 1            Structural Reforms   0.082608696 #> 2                 E M U Reforms   0.039130435 #> 3 Stronger EU fiscal regulation   0.056521739 #> 4                Fiscal Support   0.013043478 #> 5          Economic Stimulation   0.004347826  #remove temporary values rm(instrument, score)"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-7-interactive-visualisation-of-the-cm","dir":"Articles","previous_headings":"Introduction","what":"Step 7:: Interactive visualisation of the CM","title":"cognitivemapr analysis functions","text":"argued , conduct narrative analysis CM, convenient way make visual representation CM. Using visNetworks package, possible draw sophisticated CMs include information paradigms instruments easy read. addition, package CM can made interactive, allowing user move concepts, zoom . addition, creates containers different instrument types instrument-concepts can shown individually, collapsed category. order use features, edgelist node_measures lists must reformatted work VisNetworks package. prep_cm_visualisation function conduct reformatting. Subsequently, interactive_visual_cm function produce interactive CM researcher analyse. order r","code":"# run the prep_cm_visualisation function interact_cm_lists <- cognitivemapr::prep_cm_visualisation(rutte_p2_edgelist,rutte_p2_node_measures)  # extract and store the new edge and node_measures list rutte_p2_edgelist <- interact_cm_lists[[1]] rutte_p2_node_measures <- interact_cm_lists[[2]] # create the interactive cm interactive_cm_rutte_p2 <- cognitivemapr::interactive_visual_cm(rutte_p2_edgelist, rutte_p2_node_measures)  # if a group consists of one value, the clustering only shows the node not the group"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_cognitivemapr_analysis_functions.html","id":"step-8-causal-power-to-be-added-in-the-next-version","dir":"Articles","previous_headings":"Introduction","what":"Step 8: Causal Power [to be added in the next version]","title":"cognitivemapr analysis functions","text":"Finally, taking full advantage graphical nature, CM can used establish causal strength policy instruments identified map. combine narrative analysis quantitative measures. start assuming higher weight link cause effect, stronger actors believe causal effect. addition, assume larger distance cause effect (logical steps takes explain relationship instrument goal), weaker presumed causal power instrument (cf. Septer, Dijkstra, Stokman 2012; Shapiro Bonham 1973). basis , propose causal power (\\(CP\\)) instrument particular goal may established follows (Septer, Dijkstra, Stokman 2012: First, subsequent concept antecedent path, autonomous power (\\(AP\\)) may determined following calculation: \\[AP = Ev*W*(0.9(D-1))\\]Whereby: \\(Ev\\) = Evaluation cause concept  (-1, 0, +1) \\(W\\) = Weight relation \\(D\\) = Distance/steps effect concept calculate total causal power policy instrument, \\(AP\\)-scores concepts path multiplied: \\[CP = AP1 * AP2 * ... APi\\] figure 1, causal power concept ‘ESM’ (\\(D=2\\)) runs via (\\(W=2\\), \\(EV=+1\\)) concept ‘market trust’ (\\(D=1\\)), turn positively feeds (\\(W=1\\), \\(EV=+1\\)) ‘solving crisis’. causal power ESM thus calculated follows: \\[CP=(+1*2*(0.9 (2-1)) * (+1*1*(0.9 (1-1)) = 1.8\\] Scholars used similar analyses derive policy preferences domain environmental foreign policy decisions identify conditions ideas affect policies even run simulations policy making processes (Bonham, Shapiro, Trumble 1979; Hart 1976).","code":""},{"path":[]},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_create_edge_nodelists.html","id":"install-cognitivemapr","dir":"Articles","previous_headings":"Create edge and nodelists","what":"1: Install cognitivemapr","title":"Tutorial Preprocessing Edge and Nodelists","text":"install cognitivemapr package, run following code:","code":"install.packages(\"devtools\", repos = \"https://cloud.r-project.org/\") library(devtools)  devtools::install_github(\"https://github.com/Fesch-star/cognitivemapr\") library(cognitivemapr)"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_create_edge_nodelists.html","id":"introducing-the-functions","dir":"Articles","previous_headings":"Create edge and nodelists","what":"2: Introducing the functions","title":"Tutorial Preprocessing Edge and Nodelists","text":"cognitivemapr package contains three functions help reformat existing edgelists, create associated nodelists put proper form used functions package. cognitive map semantic network consisting causal utility relations (see Van Esch Snellens, 2024). Therefore, order use Rpackage, edgelist consist list directed relations concepts. nodelist contains unique concepts edgelist additional information regarding concepts, intrinsic normative value categorisation terms paradigms (policy) instruments (see ). functions introduced tutorial cater various startingpoints data may find : prepare_lists_from_edgelist: function used edgelist relations. helps create nodelist associated edgelist reformats edgelist work functions cognitivemapr package; align_edge_nodelist: function used edgelist nodelist, properly aligned yet. function (re)aligns lists copying (normative) value nodes nodelist edgelist, required running functions package. situation may occur (manually) added changed (intrinsic normative) value nodes nodelist (need re-align edge nodelist returned first function added categorisation terms paradigms instruments). reformat_edge_nodelist: function used edgelist associated nodelist contain necessary information required format package. function reformats lists can run functions package. edgelists nodelists functions take, already require use certain formatting compiling (see ). tutorial simple bespoke edgelists (nodelists) created examples run functions .","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_create_edge_nodelists.html","id":"create-a-nodelist-from-an-edgelist","dir":"Articles","previous_headings":"Create edge and nodelists","what":"3: Create a nodelist from an edgelist","title":"Tutorial Preprocessing Edge and Nodelists","text":"order run functions package edgelist associated nodelist needed. data exists edgelist relations, function “prepare_lists_from_edgelist” help create accompanying nodelist, containing (unique) concepts edgelist. function requires edgelist following 4 columns listed column titles, addition number columns meta-data may added. “”: cause concept (may consist multiple words) “”: effect utility concept (may consist multiple words) “weight”: number times relation mentioned (can number, left empty function set 1 default) “edge_value”: sign/value relation: can 1 (positive relation), -1 (negative relation), 0 (non-existent relation). left empty function set default 1 (positive). first create simple dataframe/edgelist fitting requirements use example tutorial (see Van Esch etal 2018 discussion derive edgelist CM analysis texts obtain data directly respondents). Run function example data return resulting edgelist nodelist. Reviewing resulting edgelist nodelist shows list reformatted fit requirements functions package: created nodelist contains (unique) concepts featured original edgelist concepts unique id created. default, function assumes concepts positive/neutral (intrinsic normative) value (value 1). information supplied categorisation concepts terms paradigms instruments, columns created left empty. addition, edgelist reformatted align nodelist: Rather listing concepts, “” “” columns now list id’s concepts corresponding nodelist. data columns “weight”, “edge-value” “map_date” left untouched. However two extra columns added displaying (intrinsic normative) value concepts “” (value.x) “” (value.y) columns derived nodelist. nodelist new edgelist prepare_lists_from_edgelist function creates contain minimum amount data needed run basic functions cognitivemapr Rpackage (calculate_degrees & evaluate_concepts) well correct formatting. However, information needed reap full potential package, use functions like paradigm_support, instrument_support interactive_visual_cm. functions require nodelist supplies categorisation concepts terms paradigms instruments. Also, concepts may intrinsic negative normative value, necessitates adjusting values “value” columns nodelist edgelist. nodelist prepare_list_from_edgelist function returned may used template add/change information.","code":"# create a simple single edgelist  # create a list of cause concepts (mandatory column) from <- c(\"a\", \"c\", \"d\", \"b\") # creat a list of effect/utility concepts (mandatory column) to <- c(\"c\", \"d\", \"e\", \"d\") # set number of times the relation occurs (mandatory column, could be left empty) weight <- c(1, 1, 1, 1) # set the value of the relation (positive, negative or non-existent effect, could be left empty) edge_value <- c(1, -1, -1, 1) # example of non-mandatory meta-data: date map_date <- c(\"20-5-2010\", \"21-5-2010\", \"22-5-2010\", \"23-5-2010\") # combine the data into a dataframe: the original simple edgelist single_edgelist <- data.frame(from, to, weight, edge_value, map_date) # run the function on the example data and return the resulting edge and nodelist  # run the function and return both the edge and nodelist new_edgelist <- cognitivemapr::prepare_lists_from_edgelist(single_edgelist)[[2]] nodelist <- cognitivemapr::prepare_lists_from_edgelist(single_edgelist)[[1]]  # show both lists new_edgelist #>   from to weight edge_value  map_date value.x value.y #> 1    1  2      1          1 20-5-2010       1       1 #> 2    2  3      1         -1 21-5-2010       1       1 #> 3    3  5      1         -1 22-5-2010       1       1 #> 4    4  3      1          1 23-5-2010       1       1 nodelist #>   id node_name value paradigms instruments #> 1  1         a     1        NA          NA #> 2  2         c     1        NA          NA #> 3  3         d     1        NA          NA #> 4  4         b     1        NA          NA #> 5  5         e     1        NA          NA"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_create_edge_nodelists.html","id":"adding-to-or-revising-a-nodelist","dir":"Articles","previous_headings":"Create edge and nodelists","what":"4: Adding to or revising a nodelist","title":"Tutorial Preprocessing Edge and Nodelists","text":"Deriving nodelist edgelist prepare_list_from_edgelist function results nodelist contain necessary categorisations concepts CM conduct full analysis. addition, (normative) value concepts set positive/neutral default, may accurate. order add /change information, changes must made nodelist. may done manually excel storing nodelist. However, example data, make changes R. changes made de value concepts nodelist, edge nodelist must subsequently realigned using second list function cognitivemapr package: align_edge_nodelist. new_nodelist returned changed still contains information (manually) added previous steps. new_edgelist2 shows new value -1 concept c, corresponds changes (manually) made nodelist. Note trace changes made paradigms instruments column edgelist. information stored nodelist. means re-alignment egdelist nodelist needed amend information paradigms instruments.","code":"# to store the new_nodelist when you want to make the changes # manually in excel, you run the following code # [will not be executed in this tutorial]  # write.csv(nodelist, file = \"[location/filename.csv]\", row.names = FALSE)  # change nodelist by adding information on paradigms and instruments nodelist$paradigms[nodelist$node_name %in% c(\"a\", \"b\")] <- \"ordoliberal\" nodelist$instruments[nodelist$node_name == \"a\"] <- \"economic stimulation\"  # change the value of concept a from positive to negative nodelist$value[nodelist$node_name == \"c\"] <- -1  # renaming the nodelist for clarity new_nodelist <- nodelist  # show the new_nodelist new_nodelist #>   id node_name value   paradigms          instruments #> 1  1         a     1 ordoliberal economic stimulation #> 2  2         c    -1        <NA>                 <NA> #> 3  3         d     1        <NA>                 <NA> #> 4  4         b     1 ordoliberal                 <NA> #> 5  5         e     1        <NA>                 <NA>"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_create_edge_nodelists.html","id":"re-align-the-edge-and-nodelist","dir":"Articles","previous_headings":"Create edge and nodelists","what":"5: (Re) align the edge and nodelist","title":"Tutorial Preprocessing Edge and Nodelists","text":"second function create edge nodelist properly formatted use functions cognitivemapr Rpackage - align_edge_nodelist - may used properly realign edgelist amended nodelist. function takes amended nodelist edgelist returns ‘prepare_lists_from_edgelist’ ’s input. new_nodelist returned changed since previous step still contains information (manually) added . new_edgelist2, however, shows new value -1 concept c, corresponds changes included new_nodelist. Note trace changes made paradigms instruments column edgelist. information stored nodelist. means re-alignment egdelist nodelist needed amend information paradigms instruments.","code":"#run the function on the amended nodelist and new_edgelist new_edgelist2 <- cognitivemapr::align_edge_nodelist(new_edgelist, nodelist)[[1]] new_nodelist <- cognitivemapr::align_edge_nodelist(new_edgelist, nodelist)[[2]]  # show the new edge and nodelist new_edgelist2 #>   id node_name value   paradigms          instruments #> 1  1         a     1 ordoliberal economic stimulation #> 2  2         c    -1        <NA>                 <NA> #> 3  3         d     1        <NA>                 <NA> #> 4  4         b     1 ordoliberal                 <NA> #> 5  5         e     1        <NA>                 <NA> new_nodelist #>   from to weight edge_value  map_date value.x value.y #> 1    1  2      1          1 20-5-2010       1      -1 #> 2    2  3      1         -1 21-5-2010      -1       1 #> 3    3  5      1         -1 22-5-2010       1       1 #> 4    4  3      1          1 23-5-2010       1       1"},{"path":"https://fesch-start.github.io/cognitivemapr/articles/Tutorial_create_edge_nodelists.html","id":"reformat-edge-and-nodelist","dir":"Articles","previous_headings":"Create edge and nodelists","what":"6: Reformat edge and nodelist","title":"Tutorial Preprocessing Edge and Nodelists","text":"Finally, may start proces analysing data cognitivemapr package edgelist well nodelist proper node values categorisation concepts terms paradigms instruments. However, may yet fulfill formatting requirements package. function reformat_edge_nodelist helps put simple edge nodelist proper formatting work cognitivemapr functions. simple requirements function reformat lists. reformat_edge_nodelist function requires edgelist following 4 columns listed column titles, addition number columns meta-data may added. “”: cause concept (may consist multiple words) “”: effect utility concept (may consist multiple words) “weight”: number times relation mentioned (can number, left empty function set 1 default) “edge_value”: sign/value relation: can 1 (positive relation), -1 (negative relation), 0 (non-existent relation). left empty function set default 1 (positive). reformat_edge_nodelist function also requires nodelist following 4 columns listed column titles, addition number columns meta-data may added. “node_name”: name unique concepts edgelist “value”: intrisic (normative) value concept displayed number (1 = positive/neutral, -1 = negative). use negative value sparsely whether concept positive negative often subjective. cell left empty column function set default 1 (positive/neutral). “paradigms”: categorisation concept belonging /associated one two incommensurable paradigms, Ordoliberal versus Keynesian (van Esch & Snellens 2024). can distinguish two paradigms column leave cell empty concept align one two paradigms. “instruments”: categorisation concept particular type policy-instrument. can distinguish number different instruments column leave cell empty concept policy instrument. column can also used type categorisation concepts deemed relevant, change name column. single_edgelist created start tutorial fulfills requirements reformat_edge_nodelist function, however, need create new nodelist one’s created previous functions, already columns required. now simple edge nodelist may easily compiled researcher proper format run reformat_edge_nodelist function . Reviewing returned edge nodelist shows reformat_edge_nodelist function adds id’s nodelist replaces concepts edgelist id’s correspond nodelist. reorders columns edgelist match requirements functions package. checks whether columns weight edge-value edgelist column value nodelist values, sets values default 1 left empty uploaded lists. assigns “” “” concepts edgelist value given nodelist (sets default 1 left empty) adding respectively value.x value.y edgelist. function also retains meta-data included original lists. list can now used analysis functions cognitivemapr package. Please refer cognitivemapr Tutorial explanation illustration analytical functions cognitivemapr package.","code":"# create a simple nodelist with the proper information on the value, paradigms and instruments   node_name <- c(\"a\", \"b\", \"c\", \"d\", \"e\") # making a list of all unique concepts in the edgelist value <- c(\"1\", \"-1\", \"1\", \"1\", \"-1\") # making a list of node values paradigms <- c(\"ordoliberal\", NA, NA, \"keynesian\", NA) # list of paradigms instruments <- c(\"economic stimulation\", \"financial market regulation\", NA, NA, \"economic stimulation\") # list of instruments date <- c(\"20-5-2010\", \"20-5-2010\", \"22-5-2010\", \"23-5-2010\", \"23-5-2010\") # non-mandatory meta-data  # compile the nodelist (dataframe) from these lists complete_nodelist <- data.frame(node_name, value, paradigms, instruments, date)  #show the complete_nodelist complete_nodelist #>   node_name value   paradigms                 instruments      date #> 1         a     1 ordoliberal        economic stimulation 20-5-2010 #> 2         b    -1        <NA> financial market regulation 20-5-2010 #> 3         c     1        <NA>                        <NA> 22-5-2010 #> 4         d     1   keynesian                        <NA> 23-5-2010 #> 5         e    -1        <NA>        economic stimulation 23-5-2010 # run the function & return the edge and nodelist  new_edgelist3 <- cognitivemapr::reformat_edge_nodelist(single_edgelist, complete_nodelist) [[2]] new_nodelist2 <- cognitivemapr::reformat_edge_nodelist(single_edgelist, complete_nodelist) [[1]]  new_edgelist3 #>   from to weight edge_value value.x value.y  map_date #> 1    1  3      1          1       1       1 20-5-2010 #> 2    3  4      1         -1       1       1 21-5-2010 #> 3    4  5      1         -1       1      -1 22-5-2010 #> 4    2  4      1          1      -1       1 23-5-2010 new_nodelist2 #>   id node_name value   paradigms                 instruments      date #> 1  1         a     1 ordoliberal        economic stimulation 20-5-2010 #> 2  2         b    -1        <NA> financial market regulation 20-5-2010 #> 3  3         c     1        <NA>                        <NA> 22-5-2010 #> 4  4         d     1   keynesian                        <NA> 23-5-2010 #> 5  5         e    -1        <NA>        economic stimulation 23-5-2010 #running the first function of the package - calculate_degrees - with the new_edgelist3 and new_nodelist2 as an example data of Mark Rutte, and storing it as a df test_node_measures <- cognitivemapr::calculate_degrees(new_edgelist3, new_nodelist2)  # this shows that the created edge and nodelist indeed work with the other functions in the package and returns some first basis findings str(test_node_measures) #> 'data.frame':    5 obs. of  14 variables: #>  $ id         : int  1 2 3 4 5 #>  $ node_name  : chr  \"a\" \"b\" \"c\" \"d\" ... #>  $ value      : chr  \"1\" \"-1\" \"1\" \"1\" ... #>  $ paradigms  : chr  \"ordoliberal\" NA NA \"keynesian\" ... #>  $ instruments: chr  \"economic stimulation\" \"financial market regulation\" NA NA ... #>  $ date       : chr  \"20-5-2010\" \"20-5-2010\" \"22-5-2010\" \"23-5-2010\" ... #>  $ indegree   : num  0 0 1 2 1 #>  $ outdegree  : num  1 1 1 1 0 #>  $ degree     : num  1 1 2 3 1 #>  $ w_indegree : num  0 0 1 2 1 #>  $ w_outdegree: num  1 1 1 1 0 #>  $ w_degree   : num  1 1 2 3 1 #>  $ go         : num  -1 -1 0 0.333 1 #>  $ gow        : num  -1 -1 0 0.333 1"},{"path":"https://fesch-start.github.io/cognitivemapr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Femke van Esch. Author, maintainer. Jelle Treep. Author. Neha Moopen. Contributor. Jeroen Snellens. Contributor.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"van Esch F, Treep J (2024). cognitivemapr: cognitivemapr: Functions Cognitive Mapping Analysis. R package version 0.1.0.","code":"@Manual{,   title = {cognitivemapr: cognitivemapr: Functions for Cognitive Mapping Analysis},   author = {Femke {van Esch} and Jelle Treep},   year = {2024},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"https://fesch-start.github.io/cognitivemapr/index.html","id":"cognitivemapr-","dir":"","previous_headings":"","what":"cognitivemapr","title":"cognitivemapr: Functions for Cognitive Mapping Analysis","text":"Cognitive Mapping (CM) method specifically designed study belief systems espoused individuals organisations several advantages methods. goal cognitivemapr reduce initial investment currently needed start using method. functions package allow conduct CM analysis similar conducted following publication: Van Esch, Femke .W.J., Snellens, Jeroen F.. (2024). ‘’measure’ Ideas. Introducing method cognitive mapping domain ideational policy studies’. Journal European Public Policy, 31(2), 428-451. https://doi.org/10.1080/13501763.2022.2155215","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"cognitivemapr: Functions for Cognitive Mapping Analysis","text":"can install development version cognitivemapr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Fesch-star/cognitivemapr\")"},{"path":"https://fesch-start.github.io/cognitivemapr/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"cognitivemapr: Functions for Cognitive Mapping Analysis","text":"Installing package () install package dependencies: knitr readr rmarkdown testthat dplyr igraph tibble","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"cognitivemapr: Functions for Cognitive Mapping Analysis","text":"Running functions cognitivemapr package requires data compiled edge nodelists. instruction formatting requirements, see ‘Tutorial_create_edge_nodelist’. tutorial also provides explanation use three functions package may help reformat data. information regarding analytical functions package, please refer Tutorial_cognitivemapr_analysis_functions.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"cognitivemapr: Functions for Cognitive Mapping Analysis","text":"happy suggestions contributions improve package. Read contributing guidelines instructions.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/index.html","id":"authors--acknowledgements","dir":"","previous_headings":"","what":"Authors & Acknowledgements","title":"cognitivemapr: Functions for Cognitive Mapping Analysis","text":"cognitivemapr package created Femke van Esch Jelle Treep contributions Neha Moopen Jeroen Snellens.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"cognitivemapr: Functions for Cognitive Mapping Analysis","text":"project licensed terms GPL-3.0 License","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"cognitivemapr: Functions for Cognitive Mapping Analysis","text":"Please cite project follows:","code":"@software{van_Esch_cognitivemapr_Functions_for, author = {van Esch, Femke and Treep, Jelle and Moopen, Neha and Snellens, Jeroen}, license = {GPL-3.0}, title = {{cognitivemapr: Functions for Cognitive Mapping Analysis}}, url = {https://github.com/Fesch-star/cognitivemapr} }"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/align_edge_nodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Copies the (normative) value of nodes from the nodelist to the edgelist. — align_edge_nodelist","title":"Copies the (normative) value of nodes from the nodelist to the edgelist. — align_edge_nodelist","text":"function used align values concepts edgelist nodelist value concepts lists align .need run function changed default value concepts nodelist running prepare_lists_from_edgelist' function. need run added information paradigm instruments columns nodelist","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/align_edge_nodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copies the (normative) value of nodes from the nodelist to the edgelist. — align_edge_nodelist","text":"","code":"align_edge_nodelist(edgelist, nodelist)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/align_edge_nodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copies the (normative) value of nodes from the nodelist to the edgelist. — align_edge_nodelist","text":"edgelist edgelist nodelist nodelist","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/align_edge_nodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copies the (normative) value of nodes from the nodelist to the edgelist. — align_edge_nodelist","text":"Returns edgelist nodelist","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/align_edge_nodelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copies the (normative) value of nodes from the nodelist to the edgelist. — align_edge_nodelist","text":"takes edgelist returns 'prepare_lists_from_edgelist' function nodelist returned function manually made changes value column. Categorizing concepts paradigmatic instruments optional, required run functions paradigm_support instrument_support functions - see instructions documentation functions).","code":""},{"path":[]},{"path":"https://fesch-start.github.io/cognitivemapr/reference/calculate_degrees.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates various standard CM measures (types of degrees) — calculate_degrees","title":"Calculates various standard CM measures (types of degrees) — calculate_degrees","text":"calculate_degrees function used analyse cognitive map (CM) data. calculates various standard CM measures. need run function first can run complicated functions package: (instrument_support, paradigm_support evaluate_concepts).","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/calculate_degrees.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates various standard CM measures (types of degrees) — calculate_degrees","text":"","code":"calculate_degrees(edgelist, nodelist)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/calculate_degrees.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates various standard CM measures (types of degrees) — calculate_degrees","text":"edgelist function takes edgelist (dataframe) including relations CM. data needs following column structure. last two columns include meta-data optional. research projects, types meta-data may important.   nodelist function takes nodelist (dataframe) including unique nodes/concepts CM. data needs follow column structure listed . columns may included containing categorization concepts terms - instance - paradigm align type policy instrument concept refers . different research projects, different types categorizations may relevant. addition, researchers may want add meta-data nodes. required column structure:","code":"* from: the 'cause'-node/concept id (corresponding to the id in the nodelist)   * to: the 'effect'-node/concept id (corresponding to the id in the nodelist)   * weight: the weight of the edge/relation (the number of times the relation     is mentioned in the raw data (speech/text/survey))   * map_id: a unique id for the source (speech/text/respondent) the CM     is derived from   * map_date: the date of the source (speech/text/survey)the CM is derived     from * id: unique id (number) for the node/concept   * node_name: node name/concept in words   * paradigms: a set of rivaling paradigms concepts may align with   * instruments: the type of policy instrument the concept refers to"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/calculate_degrees.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates various standard CM measures (types of degrees) — calculate_degrees","text":"function returns dataframe entitled \"node_measures\" calculated values well original data. function return store following output dataframe values, need insert following code function script:","code":"* node_measures_name_period <- calculate_degrees(edgelist, nodelist)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/calculate_degrees.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates various standard CM measures (types of degrees) — calculate_degrees","text":"concept (node) map, function calculates:   weighted equivalents","code":"* degree (also called centrality): the number of unique relations/edges   by which the concept/node is connected to others (unweighted)  * indegree: the number of relations/edges feeding into a concept/node  * outdegree: the number of relations/edges feeding out of a concept/node  * the goal-orientation (go): (indegree-outdegree)/degree * weighted degree (also called saliency): the number of relations/edges     by which the concept/node is connected to others taking into account     the weight of the relations.  * indegree: the number of relations/edges feeding into a concept/node taking     into account their weight (sum of weights of all ingoing relations)  * outdegree: the number of relations/edges feeding out of a concept/node     taking into account their weight(sum of weights of all outgoing relations)  * the weighted goal-orientation (gow): (W indegree - W outdegree)/W degree"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/draw_cm.html","id":null,"dir":"Reference","previous_headings":"","what":"Displays the cognitive map as a simple graph. — draw_cm","title":"Displays the cognitive map as a simple graph. — draw_cm","text":"function used provide first simple visualisation CM recorded edgelist nodelist. \"interactive_CM_visualization\" function package provides sophisticated easier read graph (see ). function takes edgelist nodelist, may use either original nodelist node_measures list returned functions may used earlier analysis (like 'calculate_degrees\" function).","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/draw_cm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Displays the cognitive map as a simple graph. — draw_cm","text":"","code":"draw_cm(edgelist, nodelist)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/draw_cm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Displays the cognitive map as a simple graph. — draw_cm","text":"edgelist edgelist nodelist nodelist","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/draw_cm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Displays the cognitive map as a simple graph. — draw_cm","text":"Returns visual graph","code":""},{"path":[]},{"path":"https://fesch-start.github.io/cognitivemapr/reference/evaluate_concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Determines the (normative) value of the nodes in a map, by running through the entire map a number of times — evaluate_concepts","title":"Determines the (normative) value of the nodes in a map, by running through the entire map a number of times — evaluate_concepts","text":"function used determine extent nodes (concepts) CM considered positive (supported), negative (supported) ambiguous (positive negative consequences) derived argumentation map. determines evaluation node (cause-concept) analysing outgoing relations (consequent paths) taking account initial value (positive, negative, ambiguous) nodes consequent path (effect-concepts) sign (positive, negative, non-existent) relation node (cause-concept) nodes consequent paths (effect-concepts). node (cause-concept) positively linked consequent node (effect-concept) valued positively (contributes positively b b seen positive thing); logically node (cause-concept) also regarded positive. negative relation positive consequent node (effect-concept) (diminishes b, b seen positive thing) logically leads conclusion node (cause-concept) valued negatively. negative relation negatively valued node (effect-concept) suggest cause-concept positive. function takes dyads nodes (cause effect-concept) determines value cause-concepts. nodes may multiple consequent paths, may lead different conclusions value cause-concept, function needs iterated number times reach balance derive accurate evaluation nodes takes account relations map. cyclical maps, possible balance may reached propose setting diameter map maximum number iterations","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/evaluate_concepts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determines the (normative) value of the nodes in a map, by running through the entire map a number of times — evaluate_concepts","text":"","code":"evaluate_concepts(edgelist, nodelist)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/evaluate_concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determines the (normative) value of the nodes in a map, by running through the entire map a number of times — evaluate_concepts","text":"edgelist edgelist nodelist nodelist, want add evaluation dataframe basic CM measures calculated , sure use 'node_measures' list returned running calculate_degrees function.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/evaluate_concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determines the (normative) value of the nodes in a map, by running through the entire map a number of times — evaluate_concepts","text":"Returns list resulting edgelist nodelist","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/evaluate_concepts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determines the (normative) value of the nodes in a map, by running through the entire map a number of times — evaluate_concepts","text":"","code":"# INCOMPLETE # Load the data data(\"edgelist\") #> Warning: data set ‘edgelist’ not found data(\"nodelist\") #> Warning: data set ‘nodelist’ not found  # Run the evaluation analysis"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/evaluation_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs one iteration through the CM to determine the (normative) value of the nodes in the CM — evaluation_step","title":"Performs one iteration through the CM to determine the (normative) value of the nodes in the CM — evaluation_step","text":"Helper-function. function runs single evaluation step determine extent nodes (concepts) CM considered positive (supported), negative (supported) ambiguous (positive negative consequences) derived argumentation map. determines evaluation node (cause-concept) analysing outgoing relations (consequent paths) taking account initial value (positive, negative, ambiguous) nodes consequent path (effect-concepts) sign (positive, negative, non-existent) relation node (cause-concept) nodes consequent paths (effect-concepts). node (cause-concept) positively linked consequent node (effect-concept) valued positively (contributes positively b b seen positive thing); logically node (cause-concept) also regarded positive. negative relation positive consequent node (effect-concept) (diminishes b, b seen positive thing) logically leads conclusion node (cause-concept) valued negatively. negative relation negatively valued node (effect-concept) suggest cause-concept positive. function takes dyads nodes (cause effect-concept) determines value cause-concepts. nodes may multiple consequent paths, may lead different conclusions value cause-concept. function performs analysis . often needs iterated multiple times order return true value concepts CM, performing analysis value concepts may change therefore subsequently value concepts need change . conduct holistic accurate analysis value concepts, use \"evaluate_concepts\" function R-package.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/evaluation_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs one iteration through the CM to determine the (normative) value of the nodes in the CM — evaluation_step","text":"","code":"evaluation_step(edgelist, nodelist)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/evaluation_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs one iteration through the CM to determine the (normative) value of the nodes in the CM — evaluation_step","text":"edgelist edgelist nodelist nodelist, want add evaluation dataframe basic CM measures calculated , sure use 'node_measures' list returned running calculate_degrees function.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/evaluation_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs one iteration through the CM to determine the (normative) value of the nodes in the CM — evaluation_step","text":"Returns list resulting edgelist nodelist","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/instrument_support.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the level of support for different policy instruments — instrument_support","title":"Calculates the level of support for different policy instruments — instrument_support","text":"Calculates extent cognitive map signals support certain types policy instruments. specifically, determines saliency concepts classified type policy instrument valued positively determined via \"evaluate_concepts\" function. able run function, functions \"calculate-degrees\" \"evaluate_concepts\" run first. Also nodelist (node_measures) function takes, needs contain column name 'instruments' concept noted type policy instrument represents. concept refer policy instrument, cell left empty. researcher can use typology policy instruments relevant research. function can also used conduct similar analysis categories policy instruments, like thematic analysis.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/instrument_support.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the level of support for different policy instruments — instrument_support","text":"","code":"instrument_support(node_measures, instruments)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/instrument_support.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the level of support for different policy instruments — instrument_support","text":"node_measures object class \"dataframe\" including measures returned running functions calculate_degrees & evaluate_concepts, well column title \"instruments\" concepts classified belonging pre-determined set policy instrument type. concept refer policy instrument, cell left empty. instruments object class \"vector\" containing types policy instruments occur node_measures list. derive vector run following code: \"instruments <- unique(node_measures$instruments) #deriving instrument-types node_measures dataframe instruments <- na.omit(instruments) #omitting empty cells (NULL category) analysis\"","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/instrument_support.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the level of support for different policy instruments — instrument_support","text":"Returns object class \"dataframe\" additional columns instrument types column titles saliency scores concepts evaluated positively belong categories.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/instrument_support.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the level of support for different policy instruments — instrument_support","text":"","code":"# deriving all instrument-typesfrom the node_measures dataframe if (FALSE) { library(readr) load(\"./data/rutte_p2_edgelist.rda\") load(\"./data/rutte_p2_nodelist.rda\") instruments <- base::unique(rutte_p2_node_measures$instruments) # omitting the empty cells (NULL category) from the analysis instruments <- base::na.omit(instruments) rutte_p2_node_measures <- cognitivemapr::calculate_degrees(rutte_p2_edgelist, rutte_p2_nodelist) rutte_p2_node_measures <- instrument_support(rutte_p2_node_measures, instruments) }"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/interactive_visual_cm.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an interactive graph of the CM — interactive_visual_cm","title":"Creates an interactive graph of the CM — interactive_visual_cm","text":"needs run edgelist node_measures list need run calculate_degrees, evaluate_concepts, paradigm_support instrument_support prior running function reap function's full potential. uses 'layout nicely' algorithm, can move concepts zoom , shows sign relations colors, well different node forms different paradigmatic concepts. creates containers different instruments can show 'instrument-concepts' individually collapse one category. resulting CM legends.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/interactive_visual_cm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an interactive graph of the CM — interactive_visual_cm","text":"","code":"interactive_visual_cm(edgelist, node_measures)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/interactive_visual_cm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an interactive graph of the CM — interactive_visual_cm","text":"edgelist edgelist prepared work VisNetworks node_measures node_measures prepared work VisNetworks","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/interactive_visual_cm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an interactive graph of the CM — interactive_visual_cm","text":"Returns VisNetwork interactive graph","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/interactive_visual_cm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Creates an interactive graph of the CM — interactive_visual_cm","text":"need reformat edge nodelist first work specifications VisNetworks - using function \"prep-cm_visualisations\" cogntivemapr package first.","code":""},{"path":[]},{"path":"https://fesch-start.github.io/cognitivemapr/reference/paradigm_support.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the level of support for two rivaling paradigms — paradigm_support","title":"Calculates the level of support for two rivaling paradigms — paradigm_support","text":"Calculates extent cognitive map signals support set two commensurable policy paradigms. specifically, determines saliency concepts classified aligning one two paradigms valued positively determined via evaluate_concepts function. incommensurability suggests zero-sum relation paradigms, negative valued concepts belonging paradigm interpreted support paradigm b. function lists saliency value negatively valued concepts positive score rival paradigm. able run function, functions calculate-degrees evaluate_concepts run first. Also nodelist (node_measures) list function takes needs contain column name 'paradigms' concept noted two paradigms aligns. concept speak either rival paradigms, cell left empty. researcher can use rivaling set paradigms relevant research long less two included.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/paradigm_support.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the level of support for two rivaling paradigms — paradigm_support","text":"","code":"paradigm_support(node_measures, paradigm_a, paradigm_b)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/paradigm_support.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the level of support for two rivaling paradigms — paradigm_support","text":"node_measures object class \"dataframe\" including measures returned running functions calculate_degrees & evaluate_concepts, well column title \"paradigms\" concepts classified belonging set two pre-determined paradigms. concept refer either paradigm, cell left empty. paradigm_a object class \"character string\" / first name paradigm occurs node_measures dataframe. paradigm_b object class \"character string\" / first name paradigm occurs node_measures dataframe. derive exact names paradigms appear node_measures dataframe, run following code: \"paradigms <- unique(node_measures$paradigms) #deriving names two paradigms node_measures dataframe paradigms <- na.omit(paradigms) #omitting empty cells (NULL category) analysis\"","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/paradigm_support.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the level of support for two rivaling paradigms — paradigm_support","text":"Returns object class \"dataframe\" additional columns paradigms column titles saliency scores concepts indicate positive stance towards paradigm.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/paradigm_support.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the level of support for two rivaling paradigms — paradigm_support","text":"","code":"if (FALSE) { #' library(readr) load(\"./data/rutte_p2_edgelist.rda\") load(\"./data/rutte_p2_nodelist.rda\") rutte_p2_node_measures <- cognitivemapr::calculate_degrees(rutte_p2_edgelist, rutte_p2_nodelist)  #first derive all paradigm-types from the node_measures dataframe from the analysis  paradigms <- base::unique(rutte_p2_node_measures$paradigms) paradigms <- stats::na.omit(paradigms) #omitting the empty cells (NULL category) paradigm_a <- paradigms[1] paradigm_b <- paradigms[2]  rutte_p2_node_measures <- paradigm_support(rutte_p2_node_measures, paradigm_a, paradigm_b) }"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/prep_cm_visualisation.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepares the edge and node_measures list for VisNetwork graph — prep_cm_visualisation","title":"Prepares the edge and node_measures list for VisNetwork graph — prep_cm_visualisation","text":"function needs run edgelist node_measures list need run calculate_degrees, evaluate_concepts, paradigm_support instrument_support functions data prior running function reap function's full potential. function reformats egdelist node_measure lists resulting previously ran function can make create interactive_cm \"interactive_visual_cm\" function package turn relies VisNetworks package.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/prep_cm_visualisation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepares the edge and node_measures list for VisNetwork graph — prep_cm_visualisation","text":"","code":"prep_cm_visualisation(edgelist, node_measures)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/prep_cm_visualisation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepares the edge and node_measures list for VisNetwork graph — prep_cm_visualisation","text":"edgelist edgelist node_measures node_measures list","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/prep_cm_visualisation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepares the edge and node_measures list for VisNetwork graph — prep_cm_visualisation","text":"Returns list lists","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/prep_cm_visualisation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepares the edge and node_measures list for VisNetwork graph — prep_cm_visualisation","text":"","code":"if (FALSE) { #   }"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/prepare_lists_from_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformats a simple edgelist into an edgelist and nodelist formatted correctly for the cognitivemapr package — prepare_lists_from_edgelist","title":"Reformats a simple edgelist into an edgelist and nodelist formatted correctly for the cognitivemapr package — prepare_lists_from_edgelist","text":"function used derive nodelist simple edgelist well reformat edgelist formatted correctly used cognitivemapr Rpackage. takes edgelist following 4 mandatory columns: \"\": cause concept \"\": effect concept \"weight\": number times relation mentioned (can number, left empty function set default 1) \"edge_value\": sign/value relation: can 1 (positive relation), -1 (negative relation), 0 (non-existent relation). left empty function set default 1 (positive) addition number columns meta-data may added.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/prepare_lists_from_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformats a simple edgelist into an edgelist and nodelist formatted correctly for the cognitivemapr package — prepare_lists_from_edgelist","text":"","code":"prepare_lists_from_edgelist(edgelist)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/prepare_lists_from_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformats a simple edgelist into an edgelist and nodelist formatted correctly for the cognitivemapr package — prepare_lists_from_edgelist","text":"edgelist edgelist","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/prepare_lists_from_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reformats a simple edgelist into an edgelist and nodelist formatted correctly for the cognitivemapr package — prepare_lists_from_edgelist","text":"Returns list resulting edgelist nodelist","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/prepare_lists_from_edgelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reformats a simple edgelist into an edgelist and nodelist formatted correctly for the cognitivemapr package — prepare_lists_from_edgelist","text":"function replaces concepts edgelist id's correspond returned nodelist. reorders columns match requirements functions package. checks whether columns weight edge-value edgelist values sets values default 1 (weight = 1, edge_value = positive). assumes concepts edgelist principle normatively positive neutral adding two columns: value.x (value concepts '' column) value.y (value concepts ''  column) sets values 1 (=positive) derives nodelist edgelist unique concepts id link edge nodelists. adds three  columns nodelist, column 'value' set 1 (concept positive neutral value) default. value may changed (R manually excel) needed running function. also adds two empty columns named \"paradigms\" \"instruments\", researcher fill running function. Categorizing concepts paradigmatic instruments optional, required run functions \"paradigm_support\" \"instrument_support\" functions package - see instructions documentation functions). value nodes changed running function, subsequently need run \"align_edge_nodelist\" function make sure edge nodelist aligned (necessary paradigms instruments added).","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/prepare_lists_from_edgelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reformats a simple edgelist into an edgelist and nodelist formatted correctly for the cognitivemapr package — prepare_lists_from_edgelist","text":"","code":"if (FALSE) { # INCOMPLETE # Load the data data(\"edgelist\")  # Run the following lines of code to save the edge and nodelist speaker_nodelist <- prepare_lists_from_edgelist(edgelist)[[1]] speaker_edgelist <- prepare_lists_from_edgelist(edgelist)[[2]]  # You may store the nodelist as csv and fill in the value, paradigms and # instruments column via excel by running the following code: write.csv(df,file='/.../new_file.csv',fileEncoding = \"UTF-8\") }"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/reformat_edge_nodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformats a simple edgelist and nodelist into an edgelist and nodelist that have the required format for the cognitivemapr package — reformat_edge_nodelist","title":"Reformats a simple edgelist and nodelist into an edgelist and nodelist that have the required format for the cognitivemapr package — reformat_edge_nodelist","text":"function used reformat simple node edgelist node edgelist proper format conduct analyses cognitivemapr Rpackage.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/reformat_edge_nodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformats a simple edgelist and nodelist into an edgelist and nodelist that have the required format for the cognitivemapr package — reformat_edge_nodelist","text":"","code":"reformat_edge_nodelist(edgelist, nodelist)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/reformat_edge_nodelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformats a simple edgelist and nodelist into an edgelist and nodelist that have the required format for the cognitivemapr package — reformat_edge_nodelist","text":"edgelist edgelist nodelist nodelist,","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/reformat_edge_nodelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reformats a simple edgelist and nodelist into an edgelist and nodelist that have the required format for the cognitivemapr package — reformat_edge_nodelist","text":"Returns list resulting edgelist nodelist","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/reformat_edge_nodelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reformats a simple edgelist and nodelist into an edgelist and nodelist that have the required format for the cognitivemapr package — reformat_edge_nodelist","text":"takes edgelist following 4 mandatory columns: \"\": cause concept \"\": effect concept \"weight\": number times relation mentioned (can number, left empty function set default 1) \"edge_value\": sign/value relation: can 1 (positive relation), -1 (negative relation), 0 (non-existent relation). left empty function set default 1 (positive) addition number columns meta-data may added. takes nodelist following 4 mandatory columns: \"node_name\": name unique concepts edgelist \"value\": intrisic (normative) value concept displayed number: 1 = positive/neutral, -1 = negative. use negative value sparsely whether concept positive negative often subjective. cell left empty column function set default 1 (positive/neutral). \"paradigms\": categorisation concept belonging /associated one two incommensurable paradigms, Ordoliberal versus Keynesian. can distinguish two paradigms column leave cell empty concept align one two paradigms. \"instruments\": categorisation concept particular type policy-instrument. can distinguish number different instruments column leave cell empty concept policy instrument. column can also used type categorisation concepts deemed relevant, change name column addition number columns meta-data may added. function adds id's nodelist replaces concepts edgelist id's correspond nodelist. reorders columns edgelist match requirements  functions package. checks whether columns weight edge-value edgelist column value nodelist values, sets values default 1 (weight = 1, edge_value = positive, (node)value = positive/neutral) left empty uploaded lists. assigns concepts edgelist value given nodelist (left empty set default 1) adding two columns edgelist: value_x (value concepts '' column) value_y (value concepts ''  column). returns edgelist nodelist information needed run functions cognitivemapr package proper order, retains meta-data included original lists.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/reformat_edge_nodelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reformats a simple edgelist and nodelist into an edgelist and nodelist that have the required format for the cognitivemapr package — reformat_edge_nodelist","text":"","code":"if (FALSE) { # INCOMPLETE # Load the data data(\"edgelist\")  # Run the following lines of code to save the edge and nodelist speaker_nodelist <- reformat_edge_nodelist(edgelist, nodelist)[[1]] speaker_edgelist <- reformat_edge_nodelist(edgelist, nodelist)[[2]] }"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"rutte_p2_edgelist — rutte_p2_edgelist","title":"rutte_p2_edgelist — rutte_p2_edgelist","text":"dataset consists edgelist causal utility relations derived speeches Dutch prime-minister Mark Rutte Eurozone crisis period 2nd May 2010 26th July 2012.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rutte_p2_edgelist — rutte_p2_edgelist","text":"","code":"rutte_p2_edgelist"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_edgelist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"rutte_p2_edgelist — rutte_p2_edgelist","text":"data frame 106 rows 10 variables: num numerical id cause concept num numerical id effect concept weight num number times relation mentioned (can number) edge_value num sign/value relation: can 1 (positive relation), -1 (negative relation), 0 (non-existent relation) edge_id num unique numerical id edge/relation map_id num numerical id cognitive map map_date Date date speech relation derived speaker chr name actor whose assertions edgelist derived value.x num evaluation (pos, neg ambiguous) '' concept value.y num evaluation (pos, neg ambiguous) '' concept","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_edgelist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"rutte_p2_edgelist — rutte_p2_edgelist","text":"ain ideational policy studies. Journal European Public Policy, 31(2), 428–451. https://doi.org/10.1080/13501763.2022.2155215","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_edgelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rutte_p2_edgelist — rutte_p2_edgelist","text":"variables follows:","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_node_measures.html","id":null,"dir":"Reference","previous_headings":"","what":"rutte_p2_node_measures — rutte_p2_node_measures","title":"rutte_p2_node_measures — rutte_p2_node_measures","text":"intermediate dataset used examples vignette","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_node_measures.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rutte_p2_node_measures — rutte_p2_node_measures","text":"","code":"rutte_p2_node_measures"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_node_measures.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"rutte_p2_node_measures — rutte_p2_node_measures","text":"data frame 84 rows 14 variables: id num numerical id unique concepts associated edgelist node_name chr name  unique concepts associated edgelist paradigms chr categorisation concept belonging /associated one two incommensurable paradigms int chr categorisation concept intergovernmental supranational (superfluous column now) value num intrinsic (normative) value concept displayed number: 1 = positive/neutral, -1 = negative. instruments chr categorisation concept particular type policy-instrument. column can also used type categorization concepts deemed relevant indegree indegree outdegree outdegree degree degree w_indegree w_indegree w_outdegree w_outdegree w_degree w_degree go go gow gow","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_node_measures.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"rutte_p2_node_measures — rutte_p2_node_measures","text":"van Esch, F., & Snellens, J. (2024). ‘measure’ ideas. Introducing method cognitive mapping domain ideational policy studies. Journal European Public Policy, 31(2), 428–451. https://doi.org/10.1080/13501763.2022.2155215","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_nodelist.html","id":null,"dir":"Reference","previous_headings":"","what":"rutte_p2_nodelist — rutte_p2_nodelist","title":"rutte_p2_nodelist — rutte_p2_nodelist","text":"nodelist containing unique concepts edgelist additional information regarding concepts, intrinsic normative value categorisation terms paradigms (policy) instruments.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_nodelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rutte_p2_nodelist — rutte_p2_nodelist","text":"","code":"rutte_p2_nodelist"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_nodelist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"rutte_p2_nodelist — rutte_p2_nodelist","text":"data frame 84 rows 6 variables: id num numerical id unique concepts associated edgelist node_name chr name  unique concepts associated edgelist paradigms chr categorisation concept belonging /associated one two incommensurable paradigms int chr categorisation concept intergovernmental supranational (superfluous column now) value num intrinsic (normative) value concept displayed number: 1 = positive/neutral, -1 = negative. instruments chr categorisation concept particular type policy-instrument. column can also used type categorization concepts deemed relevant","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_nodelist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"rutte_p2_nodelist — rutte_p2_nodelist","text":"van Esch, F., & Snellens, J. (2024). ‘measure’ ideas. Introducing method cognitive mapping domain ideational policy studies. Journal European Public Policy, 31(2), 428–451. https://doi.org/10.1080/13501763.2022.2155215","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/rutte_p2_nodelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rutte_p2_nodelist — rutte_p2_nodelist","text":"data includes nodelist concepts used rutte_p2_edgelist, categorised terms policy-paradigms policy-instruments associated . variables follows:","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/set_iterations.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the number of iterations for the evaluate concepts function — set_iterations","title":"Sets the number of iterations for the evaluate concepts function — set_iterations","text":"Helper function. Calculates number iterations evaluate_concepts function needs run -loop determine (normative) value concepts. number iterations set diameter CM.","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/set_iterations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the number of iterations for the evaluate concepts function — set_iterations","text":"","code":"set_iterations(edgelist, nodelist)"},{"path":"https://fesch-start.github.io/cognitivemapr/reference/set_iterations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the number of iterations for the evaluate concepts function — set_iterations","text":"edgelist edgelist nodelist nodelist","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/set_iterations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the number of iterations for the evaluate concepts function — set_iterations","text":"Returns vector maximum number iterations","code":""},{"path":"https://fesch-start.github.io/cognitivemapr/reference/set_iterations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the number of iterations for the evaluate concepts function — set_iterations","text":"","code":"set_iterations(rutte_p2_edgelist, rutte_p2_nodelist) #> [1] 5"}]
